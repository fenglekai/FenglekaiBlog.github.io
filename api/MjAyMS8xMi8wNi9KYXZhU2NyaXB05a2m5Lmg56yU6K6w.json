{"title":"JavaScript学习笔记","date":"2021-12-06T14:43:02.000Z","date_formatted":{"ll":"2021年12月6日","L":"2021/12/06","MM-DD":"12-06"},"thumbnail":"https://picsum.photos/1280/720?random=4","color":"#111","link":"2021/12/06/JavaScript学习笔记","tags":["未分类","🍕JS","📔笔记","🔥前端"],"updated":"2023-02-13T07:34:07.829Z","content":"<h1 id=\"函数的调用\">函数的调用<a title=\"#函数的调用\" href=\"#函数的调用\"></a></h1>\n<p>简单点说，带括号的是函数调用，<strong>直接执行函数</strong>；不带括号的是绑定事件，<strong>事件触发再执行</strong>。</p>\n<p>复杂点说，带括号的是把返回值赋值给事件，不带括号的是把函数体所在地址位置赋值给事件。</p>\n<p>.then()方法是异步执行；当.then()前的方法执行完后再执行then()内部的程序，这样就避免了，数据没获取到等的问题</p>\n<h1 id=\"promise\">Promise<a title=\"#promise\" href=\"#promise\"></a></h1>\n<p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p>\n<h2 id=\"promise-对象有以下两个特点\">Promise 对象有以下两个特点<a title=\"#promise-对象有以下两个特点\" href=\"#promise-对象有以下两个特点\"></a></h2>\n<ol>\n<li>\n<p>对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：</p>\n<ul>\n<li>pending: 初始状态，不是成功或失败状态。</li>\n<li>fulfilled ( resolve ): 意味着操作成功完成。</li>\n<li>rejected: 意味着操作失败。</li>\n</ul>\n<p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</p>\n</li>\n<li>\n<p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</li>\n</ol>\n<h1 id=\"解析数组对象\">解析数组对象<a title=\"#解析数组对象\" href=\"#解析数组对象\"></a></h1>\n<p><img src=\"https://gitee.com/feng-lekai/blog-image/raw/master/img/293534a7971c4647934ae4bddbe7f39b.jpg\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>通过.map()方法返回新数组，<strong>es6中只有一个形参可以不用括号，</strong> <code>item =&gt; Object.values(item)</code>map内的方法使用Object.values(item)，返回所有object对象中value的值。</p>\n<p><img src=\"https://gitee.com/feng-lekai/blog-image/raw/master/img/7341c336b25f4d409b21a41f92ef9f21.jpg\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"bind()\">bind()<a title=\"#bind()\" href=\"#bind()\"></a></h1>\n<p>方法会创建一个新的函数，称为绑定函数,fun方法在this环境下调用</p>\n<p>该方法可传入两个参数，第一个参数作为this，第二个及以后的参数则作为函数的参数调用</p>\n<h1 id=\"window.location.href的用法\">window.location.href的用法<a title=\"#window.location.href的用法\" href=\"#window.location.href的用法\"></a></h1>\n<p>javascript中的location.href有很多种用法，主要如下。</p>\n<p>self.location.href=“/url” 当前页面打开URL页面<br>\nlocation.href=“/url” 当前页面打开URL页面<br>\nwindows.location.href=“/url” 当前页面打开URL页面，前面三个用法相同。<br>\nthis.location.href=“/url” 当前页面打开URL页面<br>\nparent.location.href=“/url” 在父页面打开新页面<br>\ntop.location.href=“/url” 在顶层页面打开新页面</p>\n<p>如果页面中自定义了frame，那么可将parent self top换为自定义frame的名称,效果是在frame窗口打开url地址</p>\n<p>此外，window.location.href=window.location.href;和window.location.Reload()和都是刷新当前页面。区别在于是否有提交数据。当有提交数据时，window.location.Reload()会提示是否提交，window.location.href=window.location.href;则是向指定的url提交数据</p>\n<p>你可以这么写： location.replace(location.href);</p>\n<h2 id=\"一些通用方法\">一些通用方法<a title=\"#一些通用方法\" href=\"#一些通用方法\"></a></h2>\n<p><code>window.open(url)</code></p>\n<p><code>top.location.href=&quot;/url&quot;</code></p>\n<h3 id=\"文件下载\">文件下载<a title=\"#文件下载\" href=\"#文件下载\"></a></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件链接直接下载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"string\">&quot;url&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fileName = <span class=\"string\">&quot;filename.xlsx&quot;</span>;</span><br><span class=\"line\">a.herf = url;</span><br><span class=\"line\">a.download = fileName;</span><br><span class=\"line\">a.click();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后端blob流文件下载</span></span><br><span class=\"line\">fetch(url).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span></span><br><span class=\"line\">  response.blob().then(<span class=\"function\">(<span class=\"params\">blob</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = <span class=\"string\">&quot;filename.xlsx&quot;</span>;</span><br><span class=\"line\">    a.herf = url;</span><br><span class=\"line\">    a.download = fileName;</span><br><span class=\"line\">    a.click();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.URL.revokeObjectURL(url);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h1 id=\"返回并刷新页面：\">返回并刷新页面：<a title=\"#返回并刷新页面：\" href=\"#返回并刷新页面：\"></a></h1>\n<p>location.replace(document.referrer);</p>\n<p>document.referrer //前一个页面的URL</p>\n<p>不要用 history.go(-1)，或 history.back();来返回并刷新页面，这两种方法不会刷新页面。</p>\n<h1 id=\"时间格式化\">时间格式化<a title=\"#时间格式化\" href=\"#时间格式化\"></a></h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> value = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> getDate = value.getFullYear() + <span class=\"string\">&#x27;-&#x27;</span> + (value.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">&#x27;-&#x27;</span> + value.getDate() + <span class=\"string\">&#x27; &#x27;</span> + value.getHours() + <span class=\"string\">&#x27;:&#x27;</span> + value.getMinutes() + <span class=\"string\">&#x27;:&#x27;</span> + value.getSeconds();</span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串转换数字，判断是否是数字\">字符串转换数字，判断是否是数字<a title=\"#字符串转换数字，判断是否是数字\" href=\"#字符串转换数字，判断是否是数字\"></a></h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字加字母等非数字转换</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">&#x27;234string&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(s);　<span class=\"comment\">//234</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(s);  <span class=\"comment\">//234.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>() <span class=\"comment\">// 判断是否是数字，是返回true，否则返回false</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"遍历对象\">遍历对象<a title=\"#遍历对象\" href=\"#遍历对象\"></a></h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个对象并指定其原型，bar 为原型上的属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(&#123;</span><br><span class=\"line\"> <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bar&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// foo 为对象自身的属性</span></span><br><span class=\"line\">obj.foo = <span class=\"string\">&#x27;foo&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(obj[key]) <span class=\"comment\">// foo, bar</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for of是ES6新增的循环方法</p>\n<p>①：for of无法循环遍历对象</p>\n<p>②：遍历输出结果不同</p>\n<p>③：for in 会遍历自定义属性，for of不会</p>\n<h1 id=\"数组中删除某个元素\">数组中删除某个元素<a title=\"#数组中删除某个元素\" href=\"#数组中删除某个元素\"></a></h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除起始下标为1，长度为1的一个值(len设置1，如果为0，则数组不变) </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>]; </span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); </span><br><span class=\"line\"><span class=\"comment\">//[&#x27;a&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]; </span></span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//删除起始下标为1，长度为2的一个值(len设置2) </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>] </span><br><span class=\"line\">arr2.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2); </span><br><span class=\"line\"><span class=\"comment\">//[&#x27;a&#x27;,&#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>\n<p><strong>split() 方法用于把一个字符串分割成字符串数组。</strong></p>\n<p><strong>在判断中 == ‘’ 会判断 0，''和undefinded</strong></p>\n<h1 id=\"深拷贝和浅拷贝\">深拷贝和浅拷贝<a title=\"#深拷贝和浅拷贝\" href=\"#深拷贝和浅拷贝\"></a></h1>\n<h2 id=\"json转换\">JSON转换<a title=\"#json转换\" href=\"#json转换\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> targetObj = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(copyObj))</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(arr))</span><br></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ol>\n<li>如果对象里有函数,函数无法被拷贝下来</li>\n<li>无法拷贝copyObj对象原型链上的属性和方法</li>\n<li>当数据的层次很深，会栈溢出</li>\n</ol>\n<h2 id=\"普通递归函数\">普通递归函数<a title=\"#普通递归函数\" href=\"#普通递归函数\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\"> source </span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isObject(source)) <span class=\"keyword\">return</span> source; <span class=\"comment\">//如果不是对象的话直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> target = <span class=\"built_in\">Array</span>.isArray( source ) ? [] : &#123;&#125; <span class=\"comment\">//数组兼容</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> source ) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (source.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> source[ k ] === <span class=\"string\">&#x27;object&#x27;</span> ) &#123;</span><br><span class=\"line\">            \ttarget[ k ] = deepCopy( source[ k ] )</span><br><span class=\"line\">        \t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            \ttarget[ k ] = source[ k ]</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ol>\n<li>无法保持引用</li>\n<li>当数据的层次很深，会栈溢出</li>\n</ol>\n<h2 id=\"防栈溢出函数\">防栈溢出函数<a title=\"#防栈溢出函数\" href=\"#防栈溢出函数\"></a></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneLoop</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 栈</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> loopList = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">parent</span>: root,</span><br><span class=\"line\">            <span class=\"attr\">key</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: x,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(loopList.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 深度优先</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> node = loopList.pop();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parent = node.parent;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> key = node.key;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = node.data;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = parent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> key !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">            res = parent[key] = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data[k] === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 下一次循环</span></span><br><span class=\"line\">                    loopList.push(&#123;</span><br><span class=\"line\">                        <span class=\"attr\">parent</span>: res,</span><br><span class=\"line\">                        <span class=\"attr\">key</span>: k,</span><br><span class=\"line\">                        <span class=\"attr\">data</span>: data[k],</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res[k] = data[k];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ol>\n<li>不会栈溢出</li>\n<li>支持很多层级的数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyObject</span>(<span class=\"params\">orig</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> copy = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.getPrototypeOf(orig));</span><br><span class=\"line\">   copyOwnPropertiesFrom(copy, orig);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyOwnPropertiesFrom</span>(<span class=\"params\">target, source</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">Object</span></span><br><span class=\"line\">   .getOwnPropertyNames(source)</span><br><span class=\"line\">   .forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">propKey</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> desc = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(source, propKey);</span><br><span class=\"line\">     <span class=\"built_in\">Object</span>.defineProperty(target, propKey, desc);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> target;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jack&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>: <span class=\"string\">&#x27;32&#x27;</span>,</span><br><span class=\"line\">   <span class=\"attr\">job</span>: <span class=\"string\">&#x27;developer&#x27;</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> obj2 = copyObject(obj);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(obj2);</span><br><span class=\"line\"> obj.age = <span class=\"number\">39</span>;</span><br><span class=\"line\"> obj.name = <span class=\"string\">&#x27;Tom&#x27;</span>;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(obj2);</span><br></pre></td></tr></table></figure>\n<h1 id=\"一些数据数据处理的方法\">一些数据数据处理的方法<a title=\"#一些数据数据处理的方法\" href=\"#一些数据数据处理的方法\"></a></h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// string转number</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(string); <span class=\"comment\">// 整型</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(string); <span class=\"comment\">// 浮点型</span></span><br><span class=\"line\"><span class=\"comment\">// 浮点数处理</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"string\">&#x27;1.2345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(num * <span class=\"number\">100</span>) / <span class=\"number\">100</span>; <span class=\"comment\">//向上取整</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.ceil(num * <span class=\"number\">100</span>) / <span class=\"number\">100</span>; <span class=\"comment\">// 向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.round(num * <span class=\"number\">100</span>) / <span class=\"number\">100</span>; <span class=\"comment\">// 四舍五入</span></span><br><span class=\"line\">NumberObject.toFixed(num) <span class=\"comment\">//这里的num是指0~20的数字，用于保留小数后num位，如果不足会补0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用filter做批量勾选删除\">使用filter做批量勾选删除<a title=\"#使用filter做批量勾选删除\" href=\"#使用filter做批量勾选删除\"></a></h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> new_arr = attendeeList.filter(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">attendee</span>) =&gt;</span> selectedRowKeys.filter(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> key === attendee.id).length === <span class=\"number\">0</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组上移下移操作\">数组上移下移操作<a title=\"#数组上移下移操作\" href=\"#数组上移下移操作\"></a></h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">up</span>(<span class=\"params\">index</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//在上一项插入该项</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.list.splice(index - <span class=\"number\">1</span>, <span class=\"number\">0</span>, (<span class=\"built_in\">this</span>.list[index]))</span><br><span class=\"line\">            <span class=\"comment\">//删除后一项</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.list.splice(index + <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.save();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">down</span>(<span class=\"params\">index</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index === (<span class=\"built_in\">this</span>.list.length-<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 在下一项插入该项</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.list.splice(index + <span class=\"number\">2</span>, <span class=\"number\">0</span>, (<span class=\"built_in\">this</span>.list[index]))</span><br><span class=\"line\">            <span class=\"comment\">// 删除前一项</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.list.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.save();</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>字母</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>y</td>\n<td style=\"text-align:center\">年份。一般用 yy 表示两位年份，yyyy 表示 4 位年份</td>\n<td style=\"text-align:center\">使用 yy 表示的年扮，如 11；使用 yyyy 表示的年份，如 2011</td>\n</tr>\n<tr>\n<td>M</td>\n<td style=\"text-align:center\">月份。一般用 MM 表示月份，如果使用 MMM，则会根据语言环境显示不同语言的月份</td>\n<td style=\"text-align:center\">使用 MM 表示的月份，如 05；使用 MMM 表示月份，在 Locale.CHINA语言环境下，如“十月”；在 Locale.US语言环境下，如 Oct</td>\n</tr>\n<tr>\n<td>d</td>\n<td style=\"text-align:center\">月份中的天数。一般用 dd 表示天数</td>\n<td style=\"text-align:center\">使用 dd 表示的天数，如 10</td>\n</tr>\n<tr>\n<td>D</td>\n<td style=\"text-align:center\">年份中的天数。表示当天是当年的第几天， 用 D 表示</td>\n<td style=\"text-align:center\">使用 D 表示的年份中的天数，如 295</td>\n</tr>\n<tr>\n<td>E</td>\n<td style=\"text-align:center\">星期几。用 E 表示，会根据语言环境的不同， 显示不同语言的星期几</td>\n<td style=\"text-align:center\">使用 E 表示星期几，在 Locale.CHINA 语言环境下，如“星期四”；在 <a href=\"http://Locale.US\">Locale.US</a> 语言环境下，如 Thu</td>\n</tr>\n<tr>\n<td>H</td>\n<td style=\"text-align:center\">一天中的小时数（0~23)。一般用 HH 表示小时数</td>\n<td style=\"text-align:center\">使用 HH 表示的小时数，如 18</td>\n</tr>\n<tr>\n<td>h</td>\n<td style=\"text-align:center\">一天中的小时数（1~12)。一般使用 hh 表示小时数</td>\n<td style=\"text-align:center\">使用 hh 表示的小时数，如 10 (注意 10 有可能是 10 点，也可能是 22 点）</td>\n</tr>\n<tr>\n<td>m</td>\n<td style=\"text-align:center\">分钟数。一般使用 mm 表示分钟数</td>\n<td style=\"text-align:center\">使用 mm 表示的分钟数，如 29</td>\n</tr>\n<tr>\n<td>s</td>\n<td style=\"text-align:center\">秒数。一般使用 ss 表示秒数</td>\n<td style=\"text-align:center\">使用 ss 表示的秒数，如 38</td>\n</tr>\n<tr>\n<td>S</td>\n<td style=\"text-align:center\">毫秒数。一般使用 SSS 表示毫秒数</td>\n<td style=\"text-align:center\">使用 SSS 表示的毫秒数，如 156</td>\n</tr>\n</tbody>\n</table></div></div><p><code>YYYY-MM-dd HH:mm:ss</code></p>\n<h1 id=\"前端模糊查询\">前端模糊查询<a title=\"#前端模糊查询\" href=\"#前端模糊查询\"></a></h1>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串方法indexOf</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> len = list.length;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果字符串中不包含目标字符会返回-1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list[i].indexOf(keyWord)&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        arr.push(list[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//正则表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> len = list.length;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(keyWord);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果字符串中不包含目标字符会返回-1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list[i].match(reg))&#123;</span><br><span class=\"line\">        arr.push(list[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> arr;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param <span class=\"type\">&#123;Object&#125;</span> </span>lists 所有数据</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param <span class=\"type\">&#123;Object&#125;</span> </span>keyWord 查询的关键词</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">selectMatchItem</span>(<span class=\"params\">lists, keyWord</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resArr = [];</span><br><span class=\"line\">    lists.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> item)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item[i].includes(keyWord)) &#123;</span><br><span class=\"line\">                resArr.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resArr;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 函数执行 在 “staff” 对象中查找 包含 “coot” 的数据。</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.selectMatchItem(staff,<span class=\"string\">&#x27;coot&#x27;</span>)</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Git常用命令","link":"2021/12/06/Git常用命令"},"next":{"title":"使用Typora+PicGo快速在Hexo博客上发布文章","link":"2021/11/30/使用Typora-PicGo快速在Hexo博客上发布文章"},"plink":"https://fenglekai.github.io/2021/12/06/JavaScript学习笔记/","toc":[{"id":"函数的调用","title":"函数的调用","index":"1"},{"id":"promise","title":"Promise","index":"2","children":[{"id":"promise-对象有以下两个特点","title":"Promise 对象有以下两个特点","index":"2.1"}]},{"id":"解析数组对象","title":"解析数组对象","index":"3"},{"id":"bind()","title":"bind()","index":"4"},{"id":"window.location.href的用法","title":"window.location.href的用法","index":"5","children":[{"id":"一些通用方法","title":"一些通用方法","index":"5.1","children":[{"id":"文件下载","title":"文件下载","index":"5.1.1"}]}]},{"id":"返回并刷新页面：","title":"返回并刷新页面：","index":"6"},{"id":"时间格式化","title":"时间格式化","index":"7"},{"id":"字符串转换数字，判断是否是数字","title":"字符串转换数字，判断是否是数字","index":"8"},{"id":"遍历对象","title":"遍历对象","index":"9"},{"id":"数组中删除某个元素","title":"数组中删除某个元素","index":"10"},{"id":"深拷贝和浅拷贝","title":"深拷贝和浅拷贝","index":"11","children":[{"id":"json转换","title":"JSON转换","index":"11.1"},{"id":"普通递归函数","title":"普通递归函数","index":"11.2"},{"id":"防栈溢出函数","title":"防栈溢出函数","index":"11.3"}]},{"id":"一些数据数据处理的方法","title":"一些数据数据处理的方法","index":"12"},{"id":"使用filter做批量勾选删除","title":"使用filter做批量勾选删除","index":"13"},{"id":"数组上移下移操作","title":"数组上移下移操作","index":"14"},{"id":"前端模糊查询","title":"前端模糊查询","index":"15"}],"reading_time":"2552 字约 17 分钟"}